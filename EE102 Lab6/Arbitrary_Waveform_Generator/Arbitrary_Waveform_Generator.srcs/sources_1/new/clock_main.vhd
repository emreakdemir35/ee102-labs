library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_signed.all;


entity clock_main is
    Port (
        clk_in  : in  std_logic;  -- input clock (e.g., from FPGA pin)
        reset   : in  std_logic;
        dout_o  : out std_logic   -- Output clock signal
    );
end clock_main;

architecture Behavioral of clock_main is

    -- Component Declaration for the clocking wizard IP
    component clk_wiz_0  -- IP generated by Vivado Clocking Wizard
        port (
            clk_in1  : in  std_logic;  -- Input clock
            clk_out1 : out std_logic;  -- Output clock
            reset    : in  std_logic;  -- Reset signal
            locked   : out std_logic   -- Locked signal indicating the clock is stable
        );
    end component;

    -- Signals for internal clock outputs and the locked signal
    signal clk_out_1  : std_logic;
    signal clk_locked : std_logic;
begin
    -- Instantiating the clocking wizard IP
    clk_wiz_inst : clk_wiz_0
        port map (
            clk_in1  => clk_in,     -- Connect the input clock to the clk_in1 of the clocking wizard
            clk_out1 => clk_out_1,  -- Connect the generated clock output to internal signal
            reset    => reset,      -- Connect the reset signal
            locked   => clk_locked  -- Connect the locked signal (indicating if the clock is stable)
        );

    -- Process to handle the output signal based on the input clock and reset
    process(clk_in)
    variable operation : std_logic_vector(7 downto 0);
    begin
        if rising_edge(clk_in) then
            if reset = '1' or clk_locked = '0' then
                dout_o <= '0';  -- Hold the output low if reset is high or clock is not locked
                operation := (others => '0');
            else
                operation := operation + 1;
                dout_o <= clk_out_1 xor operation(3);  -- Otherwise, pass the clock output to the dout_o signal
            end if;
        end if;
    end process;

end Behavioral;
